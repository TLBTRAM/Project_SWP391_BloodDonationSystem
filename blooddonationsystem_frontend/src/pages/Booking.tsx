import React, { useEffect, useState } from "react";
import "./components/Booking.css";
import { Link } from "react-router-dom";
import Header from "../layouts/header-footer/Header";
import Footer from "../layouts/header-footer/Footer";
import axios from "axios";

interface Schedule {
  id: number;
  scheduleDate: string;
  status: string;
  userId: number;
}

interface Slot {
  id: number;
  label: string;
}

const Booking = () => {
  const [availableSchedules, setAvailableSchedules] = useState<Schedule[]>([]);
  const [availableSlots, setAvailableSlots] = useState<Slot[]>([]);

  const [selectedScheduleId, setSelectedScheduleId] = useState<number | null>(null);
  const [selectedSlotId, setSelectedSlotId] = useState<number | null>(null);
  const [note, setNote] = useState("");
  const [submitted, setSubmitted] = useState(false);

  const [userInfo, setUserInfo] = useState({
    fullName: "",
    dob: "",
    gender: "",
    phone: "",
    email: ""
  });

  useEffect(() => {
    console.log("Booking component mounted ‚úÖ");

    // L·∫•y th√¥ng tin user
    const fetchUserInfo = async () => {
      const token = localStorage.getItem("token");
      console.log("Token slot:", token);
      try {
        const res = await axios.get("http://localhost:8080/api/user/profile", {
          headers: { Authorization: `Bearer ${token}` }
        });
        const user = res.data;
        setUserInfo({
          fullName: user.fullName || "",
          dob: user.dob || "",
          gender: user.gender || "",
          phone: user.phone || "",
          email: user.email || ""
        });
      } catch (error) {
        console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
      }
    };

    // L·∫•y danh s√°ch schedule v·ªõi tr·∫°ng th√°i OPEN
    const fetchSchedules = async () => {
      const token = localStorage.getItem("token");
      try {
        const res = await fetch("http://localhost:8080/api/schedules?status=OPEN", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!res.ok) {
          console.error("‚ùå API tr·∫£ l·ªói:", res.status, res.statusText);
          const errText = await res.text();
          console.error("üì• N·ªôi dung l·ªói:", errText);
          return;
        }

        const data = await res.json();
        setAvailableSchedules(data);
      } catch (err) {
        console.error("üí• L·ªói fetch schedules:", err);
      }
    };

    fetchUserInfo();
    fetchSchedules();
  }, []);

  // Khi user ch·ªçn l·ªãch kh√°m (schedule), l·∫•y list slot chung (do backend ch∆∞a c√≥ l·ªçc theo scheduleId)
  const handleScheduleChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {
    const id = parseInt(e.target.value);
    setSelectedScheduleId(id);
    setSelectedSlotId(null);

    try {
      const token = localStorage.getItem("token");

      // G·ªçi API l·∫•y slot chung
      const res = await fetch("http://localhost:8080/api/slot/getSlot", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) throw new Error("L·ªói l·∫•y slot");

      const data = await res.json();
      setAvailableSlots(data);
    } catch (err) {
      console.error("L·ªói fetch slot:", err);
    }
  };

  // G·ª≠i ƒëƒÉng k√Ω kh√°m
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!selectedScheduleId || !selectedSlotId) {
      alert("Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù kh√°m.");
      return;
    }

    try {
      const token = localStorage.getItem("token");

      const response = await fetch("http://localhost:8080/api/registers/createRegister", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          scheduleId: selectedScheduleId,
          slotId: selectedSlotId,
          note,
        }),
      });

      if (response.ok) {
        setSubmitted(true);
      } else {
        console.error("G·ª≠i th·∫•t b·∫°i");
        alert("C√≥ l·ªói khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói g·ª≠i:", error);
    }
  };

  return (
    <>
      <Header />
      <div className="booking-container">
        <h2 id="register-title">ƒêƒÉng k√Ω kh√°m s√†ng l·ªçc</h2>

        {submitted ? (
          <div className="success-message">
            ‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n l·ªãch kh√°m.
          </div>
        ) : (
          <form className="booking-form" onSubmit={handleSubmit}>
            <div className="form-group">
              <label>H·ªç v√† t√™n</label>
              <input className="input-text" type="text" value={userInfo.fullName} disabled />
            </div>

            <div className="form-group">
              <label>Ch·ªçn ng√†y kh√°m</label>
              <select value={selectedScheduleId ?? ""} onChange={handleScheduleChange} required>
                <option value="">-- Ch·ªçn ng√†y --</option>
                {availableSchedules.map(schedule => (
                  <option key={schedule.id} value={schedule.id}>
                    {new Date(schedule.scheduleDate).toLocaleDateString("vi-VN")}
                  </option>
                ))}
              </select>
              {availableSchedules.length === 0 && (
                <p style={{ color: "red" }}>‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m ph√π h·ª£p.</p>
              )}
            </div>

            <div className="form-group">
              <label>Ch·ªçn khung gi·ªù</label>
              <select
                className="input-text"
                value={selectedSlotId ?? ""}
                onChange={e => setSelectedSlotId(parseInt(e.target.value))}
                required
              >
                <option value="">-- Ch·ªçn gi·ªù --</option>
                {availableSlots.map(slot => (
                  <option key={slot.id} value={slot.id}>
                    {slot.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label>Ghi ch√∫ th√™m (n·∫øu c√≥)</label>
              <textarea
                className="input-text"
                value={note}
                onChange={e => setNote(e.target.value)}
                rows={3}
                placeholder="V√≠ d·ª•: C√≥ ti·ªÅn s·ª≠ d·ªã ·ª©ng, b·ªánh n·ªÅn..."
              />
            </div>

            <button type="submit" className="submit-btn">ƒêƒÉng k√Ω kh√°m</button>
            <Link to="/user" className="back">Quay tr·ªü l·∫°i</Link>
          </form>
        )}
      </div>
      <Footer />
    </>
  );
};

export default Booking;
